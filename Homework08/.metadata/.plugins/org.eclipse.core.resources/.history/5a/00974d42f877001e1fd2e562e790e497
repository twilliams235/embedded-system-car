//------------------------------------------------------------------------------
//
//  Description: This file contains the Main Routine - "While" Operating System
//
//  Jim Carlson
//  Jan 2023
//  Built with Code Composer Version: CCS12.4.0.00007_win64
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
#include  "msp430.h"
#include  <string.h>
#include  "Compiled/functions.h"
#include  "Compiled/LCD.h"
#include  "Compiled/ports.h"
#include  "Compiled/macros.h"
#include  "Compiled/timers.h"

// Function Prototypes
void main(void);
void Init_Ports(void);                        // Initialize Ports
void Init_Clocks(void);                       // Initialize Clock System
void Init_Conditions(void);                   // Initialize Variables and Initial Conditions
void Init_Timer_B0(void);
void Init_Timer_B3(void);
void Init_LCD(void);                          // Initialize LCD
void Init_LEDs(void);
void Init_ADC(void);
void Display_Process(void);
void Wheels_Process(void);
void USCI_A0_transmit(void);
void IOT_Process(void);
void Init_Serial_UCA0(void); // Initialize Serial Port for USB

  // Global Variables
volatile char slow_input_down;
extern char display_line[4][11];
extern char *display[4];
unsigned char display_mode;
extern volatile unsigned char display_changed;
extern volatile unsigned char update_display;
extern volatile unsigned int update_display_count;
extern volatile unsigned int Time_Sequence;
extern volatile char one_time;
unsigned int test_value;
char chosen_direction;
char change;

unsigned int wheel_move;
char forward;
unsigned int moving;         //Variable Tyler created
char start_moving;           //Variable Tyler created
unsigned int Last_Time_Sequence;   //Variable to identify Time_Sequence has changed
unsigned int cycle_time;            // time base used to control making shapes
unsigned int time_change;           // an identifier that a change has occurred
unsigned int delay_state;
unsigned int left_motor_count;
unsigned int right_motor_count;
unsigned int segment_count;
char event;
unsigned int dec_sec;
unsigned int step;
unsigned int second;
unsigned int startflag;

unsigned char ADC_Channel;
unsigned int ADC_Left_Detect;
unsigned int ADC_Right_Detect;
unsigned int ADC_Thumb_Detect;
unsigned char adc_char[4];

unsigned int lookflag;
char wheel_state;
char line;
unsigned int configure_wheels_flag;
unsigned int waitflag;
unsigned int going_forward;
unsigned int spinflag;
unsigned int traceflag;
unsigned int two_rotations;
unsigned int turn_time;
unsigned int enter_time;

char process_buffer[25]; // Size for appropriate Command Length
char pb_index; // Index for process_buffer
unsigned int IOT_Ring_Rx[SMALL_RING_SIZE];
char iot_TX_buf[SMALL_RING_SIZE];
char USB_Ring_Rx[SMALL_RING_SIZE];
unsigned int iot_rx_wr;
unsigned int direct_iot;
unsigned int iot_tx;
unsigned int usb_rx_wr;
volatile unsigned int usb_rx_ring_wr;
volatile char USB_Char_Rx[SMALL_RING_SIZE] ;

void main(void){
//    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer

//------------------------------------------------------------------------------
// Main Program
// This is the main routine for the program. Execution of code starts here.
// The operating system is Back Ground Fore Ground.
//
//------------------------------------------------------------------------------
  PM5CTL0 &= ~LOCKLPM5;
// Disable the GPIO power-on default high-impedance mode to activate
// previously configured port settings

  Init_Ports();                        // Initialize Ports
  Init_Clocks();                       // Initialize Clock System
  Init_Conditions();                   // Initialize Variables and Initial Conditions
  Init_Timer_B0();
  Init_Timer_B3();
  Init_LCD();                          // Initialize LCD
  Init_LEDs();
  Init_ADC();
  Init_Serial_UCA0();
//P2OUT &= ~RESET_LCD;
  // Place the contents of what you want on the display, in between the quotes
// Limited to 10 characters per line
  strcpy(display_line[0], "   NCSU   ");
  display_changed = TRUE;
  update_display = TRUE;
//  Display_Update(0,0,0,0);


  dec_sec = LOW;

  wheel_state = IDLE;
  configure_wheels_flag = LOW;
  ADC_Channel = LOW;
  two_rotations = LOW;
  turn_time = LOW;
  enter_time = LOW;


  PWM_PERIOD = WHEEL_PERIOD; // PWM Period IN Timers.C [Set this to 50005]
  LCD_BACKLITE_DIMING = PERCENT_80; // P6.0 Right Forward PWM duty cycle
  RIGHT_FORWARD_SPEED = WHEEL_OFF; // P6.1 Right Forward PWM duty cycle
  RIGHT_REVERSE_SPEED = WHEEL_OFF; // P6.2 Right Reverse PWM duty cycle
  LEFT_FORWARD_SPEED = WHEEL_OFF; // P6.3 Left Forward PWM duty cycle
  LEFT_REVERSE_SPEED = WHEEL_OFF; // P6.4 Left Reverse PWM duty cycle
  P2OUT |= IR_LED;           // Initial Value = High
  line = MEASURE;




//------------------------------------------------------------------------------
// Beginning of the "While" Operating System
//------------------------------------------------------------------------------


  while(ALWAYS) {

      Display_Process();                 // Update Display
      Wheels_Process();
      //IOT_Process();


  }
//------------------------------------------------------------------------------

}

void USCI_A0_transmit(void){ // Transmit Function for USCI_A0
// Contents must be in process_buffer
// End of Transmission is identified by NULL character in process_buffer
// process_buffer includes Carriage Return and Line Feed
    pb_index = 0; // Set Array index to first location
    UCA0IE |= UCTXIE; // Enable TX interrupt
}



//----------------------------------------------------------------------------
void Init_Serial_UCA0(void){
    int i;
    for(i=0; i<SMALL_RING_SIZE; i++){
        USB_Char_Rx[i] = 0x00; // USB Rx Buffer
    }
    usb_rx_ring_wr = BEGINNING;
    usb_rx_ring_rd = BEGINNING;
    for(i=0; i<LARGE_RING_SIZE; i++){ // May not use this
        USB_Char_Tx[i] = 0x00; // USB Tx Buffer
    }
    usb_tx_ring_wr = BEGINNING;
    usb_tx_ring_rd = BEGINNING;
    // Configure UART 0
    UCA0CTLW0 = 0; // Use word register
    UCA0CTLW0 |= UCSWRST; // Set Software reset enable
    UCA0CTLW0 |= UCSSEL__SMCLK; // Set SMCLK as fBRCLK

    // 9,600 Baud Rate
    // 1. Calculate N = fBRCLK / Baudrate
    // N = SMCLK / 9,600 => 8,000,000 / 9,600 = 833.3333333
    // if N > 16 continue with step 3, otherwise with step 2
    // 2. OS16 = 0, UCBRx = INT(N)
    // continue with step 4
    // 3. OS16 = 1,
    // UCx = INT(N/16),
    // = INT(N/16) = 833.333/16 => 52
    // UCFx = INT([(N/16) – INT(N/16)] × 16)
    // = ([833.333/16-INT(833.333/16)]*16)
    // = (52.08333333-52)*16
    // = 0.083*16 = 1
    // 4. UCSx is found by looking up the fractional part of N (= N-INT(N)) in table Table 18-4
    // Decimal of SMCLK / 8,000,000 / 9,600 = 833.3333333 => 0.333 yields 0x49 [Table]
    // 5. If OS16 = 0 was chosen, a detailed error calculation is recommended to be performed
    // TX error (%) RX error (%)
    // BRCLK Baudrate UCOS16 UCBRx UCFx UCSx neg pos neg pos
    // 8000000 9600 1 52 1 0x49 -0.08 0.04 -0.10 0.14
    UCA0BRW = 52; // 9,600 Baud
    // UCA0MCTLW = UCSx concatenate UCFx concatenate UCOS16;
    // UCA0MCTLW = 0x49 concatenate 1 concatenate 1;
    UCA0MCTLW = 0x4911 ;
    UCA0CTLW0 &= ~ UCSWRST; // Set Software reset enable
    UCA0IE |= UCRXIE; // Enable RX interrupt
    }

