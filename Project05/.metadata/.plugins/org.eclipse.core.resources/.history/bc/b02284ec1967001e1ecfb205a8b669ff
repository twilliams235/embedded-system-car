//------------------------------------------------------------------------------
//
//  Description: This file contains the Main Routine - "While" Operating System
//
//  Jim Carlson
//  Jan 2023
//  Built with Code Composer Version: CCS12.4.0.00007_win64
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
#include  "msp430.h"
#include  <string.h>
#include  "functions.h"
#include  "LCD.h"
#include  "ports.h"
#include  "macros.h"

// Function Prototypes
void main(void);
//void Init_Conditions(void);
//void Display_Process(void);
//void Init_LEDs(void);
//void Carlson_StateMachine(void);

  // Global Variables
volatile char slow_input_down;
extern char display_line[4][11];
extern char *display[4];
unsigned char display_mode;
extern volatile unsigned char display_changed;
extern volatile unsigned char update_display;
extern volatile unsigned int update_display_count;
extern volatile unsigned int Time_Sequence;
extern volatile char one_time;
unsigned int test_value;
char chosen_direction;
char change;

unsigned int wheel_move;
char forward;
unsigned int moving;         //Variable Tyler created
char start_moving;           //Variable Tyler created
unsigned int Last_Time_Sequence;   //Variable to identify Time_Sequence has changed
unsigned int cycle_time;            // time base used to control making shapes
unsigned int time_change;           // an identifier that a change has occurred
unsigned int delay_state;
unsigned int left_motor_count;
unsigned int right_motor_count;
unsigned int segment_count;
unsigned int backlite_flag;
unsigned int blinking;

//void main(void){
void main(void){
//    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer

//------------------------------------------------------------------------------
// Main Program
// This is the main routine for the program. Execution of code starts here.
// The operating system is Back Ground Fore Ground.
//
//------------------------------------------------------------------------------
  PM5CTL0 &= ~LOCKLPM5;
// Disable the GPIO power-on default high-impedance mode to activate
// previously configured port settings

  Init_Ports();                        // Initialize Ports
  Init_Clocks();                       // Initialize Clock System
  Init_Conditions();                   // Initialize Variables and Initial Conditions
  Init_Timer_B0();
  Init_LCD();                          // Initialize LCD
//P2OUT &= ~RESET_LCD;
  // Place the contents of what you want on the display, in between the quotes
// Limited to 10 characters per line
  strcpy(display_line[0], "   NCSU   ");
  strcpy(display_line[1], " WOLFPACK ");
  strcpy(display_line[2], "  ECE306  ");
  strcpy(display_line[3], "  GP I/O  ");
  display_changed = TRUE;
//  Display_Update(0,0,0,0);

  wheel_move = 0;
  forward = TRUE;

  start_moving = 0;
  moving = 0;
  backlite_flag = 0;
  blinking = 1;

//------------------------------------------------------------------------------
// Beginning of the "While" Operating System
//------------------------------------------------------------------------------


  while(ALWAYS) {

      switch(event) {
      case FORWARD:
          strcpy(display_line[0], "          ");
          strcpy(display_line[1], "  MOVING  ");
          strcpy(display_line[2], "  FORWARD ");
          strcpy(display_line[3], "          ");
          display_changed = TRUE;
          update_display = TRUE;
          Display_Process();                 // Update Display
          dec_sec = 1;
          Go_Forward();
          break;
      case STOP1:
          strcpy(display_line[0], "          ");
          strcpy(display_line[1], "          ");
          strcpy(display_line[2], "   STOP   ");
          strcpy(display_line[3], "          ");
          display_changed = TRUE;
          update_display = TRUE;
          Display_Process();                 // Update Display
          dec_sec = 1;
          stop();
          break;
      case REVERSE:
          strcpy(display_line[0], "          ");
          strcpy(display_line[1], "  MOVING  ");
          strcpy(display_line[2], "  REVERSE ");
          strcpy(display_line[3], "          ");
          display_changed = TRUE;
          update_display = TRUE;
          Display_Process();                 // Update Display
          dec_sec = 2;
          Go_Reverse();
          break;
      case STOP2:
          strcpy(display_line[0], "          ");
          strcpy(display_line[1], "          ");
          strcpy(display_line[2], "   STOP   ");
          strcpy(display_line[3], "          ");
          display_changed = TRUE;
          update_display = TRUE;
          Display_Process();                 // Update Display
          dec_sec = 2;
          stop();
          break;
      case SPINCW:
          strcpy(display_line[0], "          ");
          strcpy(display_line[1], "          ");
          strcpy(display_line[2], "   STOP   ");
          strcpy(display_line[3], "          ");
          display_changed = TRUE;
          update_display = TRUE;
          Display_Process();                 // Update Display
          dec_sec = 3;
          Go_CW();
          break;
      case SPINCCW:
          strcpy(display_line[0], "          ");
          strcpy(display_line[1], "          ");
          strcpy(display_line[2], "   STOP   ");
          strcpy(display_line[3], "          ");
          display_changed = TRUE;
          update_display = TRUE;
          Display_Process();                 // Update Display
          dec_sec = 3;
          Go_CCW();
          break;
      }


  }
//------------------------------------------------------------------------------

}

